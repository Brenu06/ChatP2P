import java.io.*;
import java.net.*;
import java.util.Scanner;

 public class ChatP2P {
 public static void main(String[] args) {
  Scanner scanner = new Scanner(System.in)

  System.out.print("Qual a sua porta? ");
  int minhaPorta = Integer.parseInt(scanner.nextLine());

  System.out.print("Qual IP deseja se conectar? ");
  String ipPeer = scanner.nextLine();

  System.out.print("Qual porta deseja se conectar? ");
  int portaPeer = Integer.parseInt(scanner.nextLine());

  new Thread(() -> iniciarServidor(minhaPorta)).start();

  try {
            Thread.sleep(2000);
  } catch (InterruptedException e) {
            System.out.println("Erro ao aguardar inicialização.");
  }

  iniciarCliente(ipPeer, portaPeer, scanner);

scanner.close();
    }



  scanner.close();
}

private static void iniciarServidor(int minhaPorta) {
        try (ServerSocket serverSocket = new ServerSocket(minhaPorta)) {
            System.out.println("Servidor aguardando conexões na porta: " + minhaPorta);

while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("Conexão recebida de: " + socket.getInetAddress());
new Thread(() -> tratarPeer(socket)).start();
            }
         } catch (IOException e) {
            System.out.println("Erro no servidor!");
            e.printStackTrace();
        }
    } 
private static void iniciarCliente(String ipPeer, int portaPeer, Scanner scanner) {
        while (true) {
            try {
                Socket socket = new Socket(ipPeer, portaPeer);
                System.out.println("Conectado ao peer: " + ipPeer + " na porta: " + portaPeer);
                tratarPeer(socket, scanner);
 break;
            } catch (IOException e) {
                System.out.println("Falha ao conectar. Tentando novamente em 5 segundos...");
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException ex) {
                    System.out.println("Erro ao esperar para reconectar.");
                }
            }
        }
    }
private static void tratarPeer(Socket socket, Scanner scanner) {
    try {
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

        new Thread(() -> {
            try {
                String mensagem;
                while ((mensagem = in.readLine()) != null) {
                    System.out.println("\n[Peer] " + mensagem);
                }
            } catch (IOException e) {
                System.out.println("Erro ao receber mensagens.");
            }
        }).start();

        while (true) {
            String mensagem = scanner.nextLine();
            if (mensagem.equalsIgnoreCase("sair")) {
                System.out.println("Encerrando conexão...");
                socket.close();
                break;
            }
            out.println(mensagem);
        }
    } catch (IOException e) {
        System.out.println("Erro na comunicação.");
        e.printStackTrace();
    }
}

